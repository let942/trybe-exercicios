//PARTE I

//1. âœ…Altere a funÃ§Ã£o para que o seu comportamento respeite o escopo no qual cada variÃ¡vel foi declarada.
// Modifique a estrutura da funÃ§Ã£o para que ela seja uma arrow function .
// Modifique as concatenaÃ§Ãµes para template literals .
// Copie o cÃ³digo abaixo.

// function testingScope(escopo) {
//   if (escopo === true) {
//     var ifScope = 'NÃ£o devo ser utilizada fora do meu escopo (if)';
//     ifScope = ifScope + ' Ã³timo, fui utilizada no escopo !';
//     console.log(ifScope);
//   } else {
//     var elseScope = 'NÃ£o devo ser utilizada fora meu escopo (else)';
//     console.log(elseScope);
//   }
//   console.log(ifScope + ' o que estou fazendo aqui ? :O'); // Se necessÃ¡rio esta linha pode ser removida.
// }

// testingScope(true);

const testingScope = (escopo) => ((escopo === true) ? `NÃ£o devo ser utilizada fora do meu escopo (if)` : (`NÃ£o devo ser utilizada fora meu escopo (else)`));

console.log(testingScope(false));

//-------------------------------------------
// ðŸ’¡ meu teste de apendizado

// const meuTeste = (palavra) => ((palavra === 'amora') ? 'delicia' : 'que pena');

// console.log(meuTeste('amort'));

//-------------------------------------------

// 2. âœ…Copie o cÃ³digo abaixo e faÃ§a uma funÃ§Ã£o que retorne o array oddsAndEvens em ordem crescente.
// Utilize template literals para que a chamada console.log(<seu cÃ³digo>oddsAndEvens<seu cÃ³digo>); retorne "Os nÃºmeros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".
// BÃ´nus (opcional): tente fazer o mesmo exercÃ­cio utilizando o mÃ©todo array.sort() . Spoiler: Ã‰ possÃ­vel realizar uma funÃ§Ã£o que ordene qualquer array de nÃºmeros.
// Copie o cÃ³digo abaixo.

// const oddsAndEvens = [13, 3, 4, 10, 7, 2];

// // Seu cÃ³digo aqui.

// console.log(oddsAndEvens); // serÃ¡ necessÃ¡rio alterar essa linha ðŸ˜‰

const oddsAndEvens = [13, 3, 4, 10, 7, 2];

// Seu cÃ³digo aqui.

console.log(oddsAndEvens); // serÃ¡ necessÃ¡rio alterar essa linha ðŸ˜‰

const ordemCrescente = (array) => array.sort((a, b) => a - b);

console.log(ordemCrescente(oddsAndEvens));

//-------------------------------------------
//-------------------------------------------
// PARTE II

// 1.  Crie uma funÃ§Ã£o que receba um nÃºmero e retorne seu fatorial.
// dizem que tem como fazer esse em uma linha!

const fatorial = (numero) => {
  let resultado = numero;
  let proximoNumero = (resultado - 1);

  for (let index = 0; index < numero; index += 1) {
    if (proximoNumero > 1) {

      resultado = resultado * proximoNumero;
      proximoNumero -= 1;
    }

  }
  return resultado;
}

console.log(fatorial(7));

//2. Crie uma funÃ§Ã£o que receba uma frase e retorne qual a maior palavra.

const maiorPalavra = (palavra) => {
  let array = palavra.split(' ')

  let maiorPalavra = '';
  let tamanhoMaiorPalavra = 0;
  for (let index = 0; index < array.length; index += 1) {
    const element = array[index];
    (tamanhoMaiorPalavra < element.length) ? maiorPalavra = element : maiorPalavra = maiorPalavra;
  }
  return maiorPalavra;
}

let palavra = 'AntÃ´nio foi no banheiro e nÃ£o sabemos o que aconteceu';

console.log(maiorPalavra(palavra));


// 3. Crie uma pÃ¡gina que contenha:
// Um botÃ£o ao qual serÃ¡ associado um event listener ;
// Uma variÃ¡vel clickCount no arquivo JavaScript que acumule o nÃºmero de clicks no botÃ£o;
// Um campo no HTML que vÃ¡ atualizando a quantidade de clicks no botÃ£o conforme a variÃ¡vel clickCount Ã© atualizada.

// const botao = document.getElementById('botao');
// const paragrafo = document.getElementById('paragrafo');

// let clickCount = 0;
// const funcaoClickCount = () => {
//   clickCount += 1;
//   paragrafo.innerText = clickCount;
// }

// botao.addEventListener('click', funcaoClickCount)

// 4.1 Crie um cÃ³digo JavaScript com a seguinte especificaÃ§Ã£o:
// NÃ£o se esqueÃ§a de usar template literals
// FunÃ§Ã£o 1 : Escreva uma funÃ§Ã£o que vai receber uma string como parÃ¢metro. Sua funÃ§Ã£o deverÃ¡ procurar pela letra x em uma string qualquer que vocÃª determinar e substituir pela string que vocÃª passou como parÃ¢metro. Sua funÃ§Ã£o deve retornar essa nova string .
// Exemplo:
// String determinada: "Tryber x aqui!"
// ParÃ¢metro: "Bebeto"
// Retorno: "Tryber Bebeto aqui!"
// Um array com escopo global, que Ã© o escopo do arquivo JS , nesse caso, contendo cinco strings com suas principais skills .
// FunÃ§Ã£o 2 : Escreva uma funÃ§Ã£o que vai receber a string retornada da FunÃ§Ã£o 1 como parÃ¢metro. Essa funÃ§Ã£o deve concatenar as skills do array global Ã  string que foi passada para a FunÃ§Ã£o 2 via parÃ¢metro. VocÃª deve ordenar os skills em ordem alfabÃ©tica. Sua funÃ§Ã£o deve retornar essa nova string .
// Exemplo: "Tryber x aqui! Minhas cinco principais habilidades sÃ£o:
// JavaScript;
// HTML; ... #goTrybe".

// function criaFrase(palavra)



const mainSkills = ['html', 'css', 'JavaScript', 'DOM', 'GitHub'];

function fraseComplexa(parametro) {

  const criaFrase = (palavra) => (`Tryber ${palavra} aqui! Tudo firmeza?`);
  let result = (criaFrase(parametro));

  const myMainSkills = mainSkills.sort().toString().replace(/,/g, ', ');
  // que orgulho dessa linha gigante mas que funciona  ðŸ˜Ž


  return `${result} Minhas cinco principais habilidades sÃ£o ${myMainSkills}  #goTrybe`;

}

console.log(fraseComplexa('Ã©'));